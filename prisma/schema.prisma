datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

generator client {
    provider = "prisma-client-js"
}

// Define the schema for questions
model Question {
    id                 String    @id @default(auto()) @map("_id") @db.ObjectId
    questionText       String
    options            String[]
    correctOptionIndex Int
    tags               String[]
    quiz               Quiz?     @relation(fields: [quizId], references: [id])
    quizId             String?   @db.ObjectId
    Answers            Answers[]
    marks              Int
}

model Answers {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    question   Question @relation(fields: [questionId], references: [id])
    questionId String   @db.ObjectId

    answerText         String
    correctOptionIndex Int

    Quiz   Quiz   @relation(fields: [quizId], references: [id])
    quizId String @db.ObjectId
}

enum Status {
    PASS
    FAILED
    STARTED
    FINISHED
}

model Quiz {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    endTime         DateTime?
    status          Status
    Question        Question[]
    UserPerformance UserPerformance?
    Answers         Answers[]

    User   User   @relation(fields: [userId], references: [id])
    userId String @db.ObjectId
}

model User {
    id              String            @id @default(auto()) @map("_id") @db.ObjectId
    name            String
    email           String            @unique
    createdAt       DateTime          @default(now())
    UserPerformance UserPerformance[]
    Quiz            Quiz[]
    clerkUserId     String            @unique
}

// Define the schema for user performance metrics
model UserPerformance {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    User   User   @relation(fields: [userId], references: [clerkUserId])
    userId String

    Quiz   Quiz   @relation(fields: [quizId], references: [id])
    quizId String @unique @db.ObjectId

    score        Int
    averageScore Float
    lowestScore  Int
    highestScore Int
    attempted    Int
}
